/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Bureaucrat.hpp                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nbonnet <nbonnet@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/26 13:59:11 by nbonnet           #+#    #+#             */
/*   Updated: 2025/06/26 19:37:04 by nbonnet          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once
#include <iostream>
#include <string>
#include <exception>

class Bureaucrat {
    private:
        const std::string _name;
        int _grade;
    public:
        Bureaucrat(std::string name, int grade);
        Bureaucrat (const Bureaucrat& src);
        Bureaucrat& operator=(const Bureaucrat& rhs);
        ~Bureaucrat();
        std::string getName() const;
        int getGrade() const;
        void incrementGrade();
        void decrementGrade();
        void signForm();
        class GradeTooHighException :  public std::exception {
           public:
               const char* what() const throw();
        };     
        class GradeTooLowException :  public std::exception {
            public:
                const char* what() const throw();
        };
};

std::ostream& operator<<(std::ostream& os, const Bureaucrat& bureaucrat);
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Bureaucrat.cpp                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nbonnet <nbonnet@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/26 13:58:34 by nbonnet           #+#    #+#             */
/*   Updated: 2025/06/26 19:39:04 by nbonnet          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../incl/Bureaucrat.hpp"

Bureaucrat::Bureaucrat(std::string name, int grade) : _name(name), _grade(grade) {
    std::cout << "[Bureaucrat] default constructor called" << std::endl;
    if (grade < 1)
        throw GradeTooHighException();
    else if (grade > 150)
        throw GradeTooLowException();
}

Bureaucrat::Bureaucrat(const Bureaucrat& src) : _name(src._name), _grade(src._grade) {
    std::cout << "[Bureaucrat] copy constructor called" << std::endl;

}

Bureaucrat& Bureaucrat::operator=(const Bureaucrat& rhs) {
    std::cout << "[Bureaucrat] operator= called" << std::endl;
    if (this != &rhs)
        _grade = rhs._grade;
    return *this;
}

Bureaucrat::~Bureaucrat() {
    std::cout << "[Bureaucrat] default destructor called" << std::endl;
}

std::string Bureaucrat::getName() const {
    return _name;
}

int Bureaucrat::getGrade() const {
    return _grade;
}

void Bureaucrat::incrementGrade() {
    if (_grade <= 1)
        throw GradeTooHighException();
    _grade--;
}

void Bureaucrat::decrementGrade() {
    if (_grade >= 150)
        throw GradeTooLowException();
    _grade++;
}

void Bureaucrat::signForm() {
    if (_grade < )    
}

const char* Bureaucrat::GradeTooHighException::what() const throw() {
    return "Grade is too high!";
}

const char* Bureaucrat::GradeTooLowException::what() const throw() {
    return "Grade is too low!";
}

std::ostream& operator<<(std::ostream& os, const Bureaucrat& bureaucrat) {
    os << bureaucrat.getName() << ", bureaucrat grade " << bureaucrat.getGrade();
    return os;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nbonnet <nbonnet@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/26 14:26:59 by nbonnet           #+#    #+#             */
/*   Updated: 2025/06/26 16:32:56 by nbonnet          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../incl/Bureaucrat.hpp"

int main() {
    try
    {
        std::cout << "=== Test 1 ===" << std::endl;
        Bureaucrat employee("Employee", 50);
        std::cout << "Bureaucrate créé : " << employee << std::endl;
    }
    catch (std::exception &e) {
        std::cout << "Erreur inattendue: " << e.what() << std::endl;
    }
    try
    {
        std::cout << "=== Test 2 ===" << std::endl;
        Bureaucrat boss("Boss", -1);
        std::cout << boss << std::endl;
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }
    try
    {
        std::cout << "=== Test 3 ===" << std::endl;
        Bureaucrat intern("Intern", 151);
        std::cout << intern << std::endl;
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }
    try
    {
        std::cout << "=== Test 4 ===" << std::endl;
        Bureaucrat worker("Worker", 2);
        std::cout << "Avant incrémentation : " << worker << std::endl;
        worker.incrementGrade();
        std::cout << "Après 1ère incrémentation : " << worker << std::endl;
        worker.incrementGrade();
        std::cout << "Après 2ème incrémentation : " << worker << std::endl;
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }
    try
    {
        std::cout << "=== Test 5 ===" << std::endl;
        Bureaucrat worker("Worker", 149);
        std::cout << "Avant décrémentation : " << worker << std::endl;
        worker.decrementGrade();
        std::cout << "Après 1ère décrémentation : " << worker << std::endl;
        worker.decrementGrade();
        std::cout << "Après 2ème décrémentation : " << worker << std::endl;
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }
    try
    {
        std::cout << "=== Test 6 ===" << std::endl;
        Bureaucrat original("Original", 100);
        Bureaucrat copy(original);
        std::cout << "Original : " << original << std::endl;
        std::cout << "Copie : " << copy << std::endl;
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }
    try
    {
        std::cout << "=== Test 7 ===" << std::endl;
        Bureaucrat worker1("Worker1", 75);
        Bureaucrat worker2("Worker2", 25);
        std::cout << "Avant assignation : Worker1 " << worker1 << ", Worker2 " << worker2 << std::endl;
        worker2 = worker1;
        std::cout << "Après assignation : Worker1 " << worker1 << ", Worker2 " << worker2 << std::endl;
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }

    return 0;
}